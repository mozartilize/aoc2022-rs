use std::collections::HashMap;

use day16::{Container, Vault};

fn main() {
    let mut c = Container::new();
    let zt_v = Vault::new("ZT".to_string(), 0);
    let jx_v = Vault::new("JX".to_string(), 22);
    let em_v = Vault::new("EM".to_string(), 0);
    let aa_v = Vault::new("AA".to_string(), 0);
    let hw_v = Vault::new("HW".to_string(), 0);
    let ik_v = Vault::new("IK".to_string(), 8);
    let ha_v = Vault::new("HA".to_string(), 0);
    let wh_v = Vault::new("WH".to_string(), 12);
    let ku_v = Vault::new("KU".to_string(), 0);
    let qd_v = Vault::new("QD".to_string(), 0);
    let cf_v = Vault::new("CF".to_string(), 18);
    let vc_v = Vault::new("VC".to_string(), 0);
    let jt_v = Vault::new("JT".to_string(), 0);
    let qq_v = Vault::new("QQ".to_string(), 11);
    let zp_v = Vault::new("ZP".to_string(), 0);
    let li_v = Vault::new("LI".to_string(), 0);
    let ci_v = Vault::new("CI".to_string(), 0);
    let vk_v = Vault::new("VK".to_string(), 6);
    let wl_v = Vault::new("WL".to_string(), 20);
    let ti_v = Vault::new("TI".to_string(), 0);
    let nu_v = Vault::new("NU".to_string(), 0);
    let ds_v = Vault::new("DS".to_string(), 9);
    let he_v = Vault::new("HE".to_string(), 0);
    let zh_v = Vault::new("ZH".to_string(), 0);
    let to_v = Vault::new("TO".to_string(), 0);
    let cm_v = Vault::new("CM".to_string(), 0);
    let wm_v = Vault::new("WM".to_string(), 14);
    let ez_v = Vault::new("EZ".to_string(), 16);
    let pb_v = Vault::new("PB".to_string(), 0);
    let xl_v = Vault::new("XL".to_string(), 0);
    let lb_v = Vault::new("LB".to_string(), 17);
    let wq_v = Vault::new("WQ".to_string(), 0);
    let bv_v = Vault::new("BV".to_string(), 13);
    let rn_v = Vault::new("RN".to_string(), 0);
    let lw_v = Vault::new("LW".to_string(), 0);
    let np_v = Vault::new("NP".to_string(), 0);
    let mt_v = Vault::new("MT".to_string(), 0);
    let et_v = Vault::new("ET".to_string(), 0);
    let hg_v = Vault::new("HG".to_string(), 19);
    let mv_v = Vault::new("MV".to_string(), 0);
    let rt_v = Vault::new("RT".to_string(), 0);
    let on_v = Vault::new("ON".to_string(), 0);
    let mo_v = Vault::new("MO".to_string(), 0);
    let uy_v = Vault::new("UY".to_string(), 5);
    let ur_v = Vault::new("UR".to_string(), 0);
    let ym_v = Vault::new("YM".to_string(), 0);
    let rz_v = Vault::new("RZ".to_string(), 0);
    let ad_v = Vault::new("AD".to_string(), 0);
    let eh_v = Vault::new("EH".to_string(), 0);
    let eq_v = Vault::new("EQ".to_string(), 0);
    let kx_v = Vault::new("KX".to_string(), 0);
    let br_v = Vault::new("BR".to_string(), 0);
    let lc_v = Vault::new("LC".to_string(), 0);
    let yw_v = Vault::new("YW".to_string(), 0);
    let ec_v = Vault::new("EC".to_string(), 0);
    let it_v = Vault::new("IT".to_string(), 10);
    let ms_v = Vault::new("MS".to_string(), 0);
    let fr_v = Vault::new("FR".to_string(), 0);
    let zo_v = Vault::new("ZO".to_string(), 0);

    c.add_vault(zt_v);
    c.add_vault(jx_v);
    c.add_vault(em_v);
    c.add_vault(aa_v);
    c.add_vault(hw_v);
    c.add_vault(ik_v);
    c.add_vault(ha_v);
    c.add_vault(wh_v);
    c.add_vault(ku_v);
    c.add_vault(qd_v);
    c.add_vault(cf_v);
    c.add_vault(vc_v);
    c.add_vault(jt_v);
    c.add_vault(qq_v);
    c.add_vault(zp_v);
    c.add_vault(li_v);
    c.add_vault(ci_v);
    c.add_vault(vk_v);
    c.add_vault(wl_v);
    c.add_vault(ti_v);
    c.add_vault(nu_v);
    c.add_vault(ds_v);
    c.add_vault(he_v);
    c.add_vault(zh_v);
    c.add_vault(to_v);
    c.add_vault(cm_v);
    c.add_vault(wm_v);
    c.add_vault(ez_v);
    c.add_vault(pb_v);
    c.add_vault(xl_v);
    c.add_vault(lb_v);
    c.add_vault(wq_v);
    c.add_vault(bv_v);
    c.add_vault(rn_v);
    c.add_vault(lw_v);
    c.add_vault(np_v);
    c.add_vault(mt_v);
    c.add_vault(et_v);
    c.add_vault(hg_v);
    c.add_vault(mv_v);
    c.add_vault(rt_v);
    c.add_vault(on_v);
    c.add_vault(mo_v);
    c.add_vault(uy_v);
    c.add_vault(ur_v);
    c.add_vault(ym_v);
    c.add_vault(rz_v);
    c.add_vault(ad_v);
    c.add_vault(eh_v);
    c.add_vault(eq_v);
    c.add_vault(kx_v);
    c.add_vault(br_v);
    c.add_vault(lc_v);
    c.add_vault(yw_v);
    c.add_vault(ec_v);
    c.add_vault(it_v);
    c.add_vault(ms_v);
    c.add_vault(fr_v);
    c.add_vault(zo_v);

    c.link_vaults("ZT", vec!["QQ", "DS"]);
    c.link_vaults("JX", vec!["CI", "ZH", "UR"]);
    c.link_vaults("EM", vec!["WH", "IT"]);
    c.link_vaults("AA", vec!["EQ", "QD", "NP", "ZP", "KX"]);
    c.link_vaults("HW", vec!["CI", "BV"]);
    c.link_vaults("IK", vec!["ET", "NU", "ZO", "XL", "QD"]);
    c.link_vaults("HA", vec!["WQ", "LB"]);
    c.link_vaults("WH", vec!["EM", "LW"]);
    c.link_vaults("KU", vec!["BV", "CF"]);
    c.link_vaults("QD", vec!["AA", "IK"]);
    c.link_vaults("CF", vec!["KU", "JT", "CM"]);
    c.link_vaults("VC", vec!["AD", "UY"]);
    c.link_vaults("JT", vec!["CF", "ZH"]);
    c.link_vaults("QQ", vec!["ZT"]);
    c.link_vaults("ZP", vec!["EZ", "AA"]);
    c.link_vaults("LI", vec!["LB", "CM"]);
    c.link_vaults("CI", vec!["HW", "JX"]);
    c.link_vaults("VK", vec!["YM", "LC", "HE", "NU", "TI"]);
    c.link_vaults("WL", vec!["LW", "TO"]);
    c.link_vaults("TI", vec!["VK", "YW"]);
    c.link_vaults("NU", vec!["VK", "IK"]);
    c.link_vaults("DS", vec!["NP", "MV", "FR", "ZT", "YW"]);
    c.link_vaults("HE", vec!["VK", "EQ"]);
    c.link_vaults("ZH", vec!["JT", "JX"]);
    c.link_vaults("TO", vec!["MT", "WL"]);
    c.link_vaults("CM", vec!["LI", "CF"]);
    c.link_vaults("WM", vec!["MO", "WQ", "EC", "RN"]);
    c.link_vaults("EZ", vec!["RT", "RZ", "ZP"]);
    c.link_vaults("PB", vec!["YM", "UY"]);
    c.link_vaults("XL", vec!["IK", "MS"]);
    c.link_vaults("LB", vec!["LI", "HA", "ON", "UR", "AD"]);
    c.link_vaults("WQ", vec!["WM", "HA"]);
    c.link_vaults("BV", vec!["KU", "RT", "HW", "MO", "EH"]);
    c.link_vaults("RN", vec!["WM", "RZ"]);
    c.link_vaults("LW", vec!["WH", "WL"]);
    c.link_vaults("NP", vec!["AA", "DS"]);
    c.link_vaults("MT", vec!["TO", "HG"]);
    c.link_vaults("ET", vec!["IK", "EC"]);
    c.link_vaults("HG", vec!["MT"]);
    c.link_vaults("MV", vec!["UY", "DS"]);
    c.link_vaults("RT", vec!["BV", "EZ"]);
    c.link_vaults("ON", vec!["LB", "EH"]);
    c.link_vaults("MO", vec!["BV", "WM"]);
    c.link_vaults("UY", vec!["PB", "BR", "MS", "VC", "MV"]);
    c.link_vaults("UR", vec!["JX", "LB"]);
    c.link_vaults("YM", vec!["PB", "VK"]);
    c.link_vaults("RZ", vec!["RN", "EZ"]);
    c.link_vaults("AD", vec!["VC", "LB"]);
    c.link_vaults("EH", vec!["ON", "BV"]);
    c.link_vaults("EQ", vec!["AA", "HE"]);
    c.link_vaults("KX", vec!["AA", "BR"]);
    c.link_vaults("BR", vec!["UY", "KX"]);
    c.link_vaults("LC", vec!["VK", "IT"]);
    c.link_vaults("YW", vec!["TI", "DS"]);
    c.link_vaults("EC", vec!["ET", "WM"]);
    c.link_vaults("IT", vec!["LC", "EM"]);
    c.link_vaults("MS", vec!["UY", "XL"]);
    c.link_vaults("FR", vec!["DS", "ZO"]);
    c.link_vaults("ZO", vec!["FR", "IK"]);

    let pool = c
        .has_flow_rate_vaults()
        .into_iter()
        .map(|v| v)
        .collect::<Vec<_>>();
    let path = vec![&c.idxes["AA"]];
    let mut db = HashMap::new();
    c.run3(30, 0, path, pool, &mut db);
    dbg!(db.values().map(|v| { v.1 }).max());
}
